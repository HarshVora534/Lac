@isTest
public class MyApexTestClass {

    // Test method to cover functionality of Apex class method
    @isTest
    static void testMyApexClassMethod() {
        // Test data setup
        // Create test records or any necessary data for testing

        // Call the method you want to test
        // Pass the test data to the method

        // Assert the expected results
        // Verify that the method produces the expected output
    }

    // Test method to cover functionality of trigger
    @isTest
    static void testMyTrigger() {
        // Test data setup
        // Create test records or any necessary data for testing

        // Perform DML operation that fires the trigger
        // Insert, update, delete records as needed

        // Query the records affected by the trigger

        // Assert the expected results
        // Verify that the trigger behaves as expected
    }

    // Add more test methods as needed to cover other classes and triggers
}



@isTest
public class TestScheduleUpdateRatingWarm {
    
    @isTest
    static void testScheduledJob() {
        // Create test data
        List<Account> testAccounts = new List<Account>();
        for (Integer i = 0; i < 5; i++) {
            Account acc = new Account(Name = 'Test Account ' + i, Email__c = 'test' + i + '@example.com', Rating = 'Cold');
            testAccounts.add(acc);
        }
        insert testAccounts;

        // Schedule the job
        Test.startTest();
        scheduleupdateratingwarm job = new scheduleupdateratingwarm();
        String jobId = System.schedule('Test Schedule', '0 0 0 15 3 ? 2022', job);
        Test.stopTest();

        // Verify the job has run successfully
        System.assertEquals(5, [SELECT count() FROM Account WHERE Rating = 'Warm']);

        // Clean up: cancel the scheduled job
        System.abortJob(jobId);
    }
}

///////////////////////////////////////////////////////

@isTest
public class TestScheduledJobs {

    @isTest
    static void testScheduledJobs() {
        // Create test data for scheduleupdateratingwarm
        List<Account> testAccountsRatingWarm = new List<Account>();
        for (Integer i = 0; i < 5; i++) {
            Account acc = new Account(Name = 'Test Account ' + i, Email__c = 'test' + i + '@example.com', Rating = 'Cold');
            testAccountsRatingWarm.add(acc);
        }
        insert testAccountsRatingWarm;

        // Create test data for schedulefornewaccdescription
        List<Account> testAccountsDescription = new List<Account>();
        for (Integer i = 0; i < 5; i++) {
            Account acc = new Account(Name = 'Test Account ' + i, Email__c = 'test' + i + '@example.com');
            testAccountsDescription.add(acc);
        }
        insert testAccountsDescription;

        // Schedule the jobs
        Test.startTest();
        scheduleupdateratingwarm job1 = new scheduleupdateratingwarm();
        String jobId1 = System.schedule('Test Schedule 1', '0 0 0 15 3 ? 2022', job1);

        schedulefornewaccdescription job2 = new schedulefornewaccdescription();
        String jobId2 = System.schedule('Test Schedule 2', '0 0 0 15 3 ? 2022', job2);
        Test.stopTest();

        // Verify scheduleupdateratingwarm job has run successfully
        System.assertEquals(5, [SELECT count() FROM Account WHERE Rating = 'Warm']);

        // Verify schedulefornewaccdescription job has run successfully
        System.assertNotEquals(0, [SELECT count() FROM Account WHERE Description != null]);

        // Clean up: cancel the scheduled jobs
        System.abortJob(jobId1);
        System.abortJob(jobId2);
    }
}









//////////////////////////////////
@isTest
public class TestTriggerOppHandler {

    @isTest
    static void testHandleOpportunityInsert() {
        // Create test data
        List<Opportunity> testOpps = new List<Opportunity>();
        for (Integer i = 0; i < 5; i++) {
            Opportunity opp = new Opportunity(Name = 'Test Opportunity ' + i);
            testOpps.add(opp);
        }

        // Call the handleOpportunityInsert method
        Test.startTest();
        TriggerOppHandler.handleOpportunityInsert(testOpps);
        Test.stopTest();

        // Assert the expected results
        for (Opportunity opp : testOpps) {
            System.assertEquals('New Customer', opp.Type);
        }
    }

    @isTest
    static void testHandleOpportunityUpdate() {
        // Create test data
        List<Opportunity> testOpps = new List<Opportunity>();
        for (Integer i = 0; i < 5; i++) {
            Opportunity opp = new Opportunity(Name = 'Test Opportunity ' + i);
            testOpps.add(opp);
        }
        insert testOpps;

        // Call the handleOpportunityUpdate method
        Test.startTest();
        TriggerOppHandler.handleOpportunityUpdate(testOpps, new Map<Id, Opportunity>());
        Test.stopTest();

        // Assert the expected results
        List<Task> tasks = [SELECT Subject, Status, Description, WhatId FROM Task];
        System.assertEquals(5, tasks.size());
        for (Task t : tasks) {
            System.assertEquals('Test Tasks', t.Subject);
            System.assertEquals('In Progress', t.Status);
            System.assertNotEquals(null, t.Description);
        }
    }

    @isTest
    static void testHandleOpportunityUpdate1() {
        // Create test data
        List<Opportunity> testOpps3 = new List<Opportunity>();
        for (Integer i = 0; i < 5; i++) {
            Opportunity opp = new Opportunity(Name = 'Test Opportunity ' + i);
            testOpps3.add(opp);
        }
        insert testOpps3;

        // Call the handleOpportunityUpdate1 method
        Test.startTest();
        TriggerOppHandler.handleOpportunityUpdate1(testOpps3);
        Test.stopTest();

        // Assert the expected results
        for (Opportunity opp : testOpps3) {
            System.assertEquals('Prospecting', opp.StageName);
            System.assertEquals(System.today().addDays(15), opp.CloseDate);
        }
    }
}
///////////////////////////////////// ACCC Handler

@isTest
private class TriggerAcccHandlerTest {
    @isTest
    static void testBeforeInsert() {
        // Test data preparation
        List<Account> testAccounts = new List<Account>();
        for(Integer i = 0; i < 5; i++) {
            Account acc = new Account();
            acc.Name = 'TestAccount' + i;
            testAccounts.add(acc);
        }
        
        // Test before insert trigger
        Test.startTest();
        TriggerAcccHandler.beforeinsert(testAccounts);
        Test.stopTest();
        
        // Verify if Prefix 'Mr.' is added to the name for all accounts
        for(Account acc : testAccounts) {
            System.assertEquals('Mr.TestAccount' + i, acc.Name);
        }
    }
    
    @isTest
    static void testAfterInsertDuplicate() {
        // Test data preparation
        List<Account> testAccounts = new List<Account>();
        for(Integer i = 0; i < 5; i++) {
            Account acc = new Account();
            acc.Name = 'TestAccount' + i;
            testAccounts.add(acc);
        }
        
        // Test after insert duplicate trigger
        Test.startTest();
        TriggerAcccHandler.afterinsertdup(testAccounts);
        Test.stopTest();
        
        // Verify if contacts are created for all accounts
        List<Contact> createdContacts = [SELECT Id FROM Contact WHERE AccountId IN :testAccounts];
        System.assertNotEquals(0, createdContacts.size());
    }

    // Add similar test methods for other methods in the TriggerAcccHandler class
    
    @isTest
    static void testCatchStatements() {
        // Simulate an exception being thrown in each method
        // For brevity, let's just call each method with null arguments to force an exception
        try {
            TriggerAcccHandler.beforeinsert(null);
        } catch (Exception e) {
            // Verify if the exception was handled correctly
            System.assertNotEquals(null, e);
            Integer lineNumber = e.getLineNumber();
            System.assertEquals('Plz find error in respective class', e.getMessage());
            // Assuming ErrorLogHandler is a class with a static method createExceptionRecord for logging exceptions
            // You should adjust this part according to your actual implementation
            ErrorLogHandler.createExceptionRecord(e, 'TriggerAcccHandler', 'BeforeInsert', lineNumber, 'Plz find error in respective class');
        }

        try {
            TriggerAcccHandler.afterinsertdup(null);
        } catch (Exception e) {
            // Verify if the exception was handled correctly
            System.assertNotEquals(null, e);
            Integer lineNumber = e.getLineNumber();
            System.assertEquals('Plz find error in respective class', e.getMessage());
            ErrorLogHandler.createExceptionRecord(e, 'TriggerAcccHandler', 'afterinsertdup', lineNumber, 'Plz find error in respective class');
        }

        // Repeat for other methods as needed
    }
}
///////////////

@isTest
private class TestTriggerAcccHandler {
    
    // Test method for beforeupdate
    @isTest
    static void testBeforeUpdate() {
        // Create test data
        Account oldAccount = new Account(Name = 'Old Name');
        Account newAccount = new Account(Name = 'New Name');
        insert oldAccount;
        
        // Create related contacts
        Contact relatedContactWithEmail = new Contact(AccountId = oldAccount.Id, Email = 'test@example.com');
        Contact relatedContactWithoutEmail = new Contact(AccountId = oldAccount.Id, Email = null);
        insert new List<Contact>{relatedContactWithEmail, relatedContactWithoutEmail};
        
        Map<Id, Account> oldMap = new Map<Id, Account>{oldAccount.Id => oldAccount};
        List<Account> newAccounts = new List<Account>{newAccount};
        
        // Start test
        Test.startTest();
        // Call beforeupdate method
        TriggerAcccHandler.beforeupdate(newAccounts, oldMap);
        Test.stopTest();
        
        // Verify that email is sent only for the related contact with email
        List<Messaging.SingleEmailMessage> sentEmails = [SELECT Subject, HtmlBody, ToAddress FROM Messaging.SingleEmailMessage];
        System.assertEquals(1, sentEmails.size(), 'Email should be sent only once');
        System.assertEquals('Account Name Updated', sentEmails[0].getSubject(), 'Subject should be "Account Name Updated"');
        System.assertEquals('test@example.com', sentEmails[0].getToAddresses()[0], 'Email should be sent to the related contact with email');
        System.assert(sentEmails[0].getPlainTextBody().contains('The name of the account New Name has been updated.'), 'Body should contain the updated account name');
    }
}

// Test method for beforeupdate
    @isTest
    static void testBeforeUpdate() {
        // Create test data
        Account oldAccount = new Account(Name = 'Old Name');
        Account newAccount = new Account(Name = 'New Name');
        insert oldAccount;
        
        // Create related contacts
        Contact relatedContactWithEmail = new Contact(AccountId = oldAccount.Id, Email = 'test@example.com');
        Contact relatedContactWithoutEmail = new Contact(AccountId = oldAccount.Id, Email = null);
        insert new List<Contact>{relatedContactWithEmail, relatedContactWithoutEmail};
        
        Map<Id, Account> oldMap = new Map<Id, Account>{oldAccount.Id => oldAccount};
        List<Account> newAccounts = new List<Account>{newAccount};
        
        // Start test
        Test.startTest();
        // Call beforeupdate method
        TriggerAcccHandler.beforeupdate(newAccounts, oldMap);
        Test.stopTest();
        
        // Verify that email is sent only for the related contact with email
        List<Messaging.SingleEmailMessage> sentEmails = [SELECT Subject, HtmlBody, ToAddress FROM Messaging.SingleEmailMessage];
        System.assertEquals(1, sentEmails.size(), 'Email should be sent only once');
        System.assertEquals('Account Name Updated', sentEmails[0].getSubject(), 'Subject should be "Account Name Updated"');
        System.assertEquals('test@example.com', sentEmails[0].getToAddresses()[0], 'Email should be sent to the related contact with email');
        System.assert(sentEmails[0].getPlainTextBody().contains('The name of the account New Name has been updated.'), 'Body should contain the updated account name');
    }










